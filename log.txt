Line 5: type_specifier : INT

int 

Line 5: declaration_list : ID

a

Line 5: var_declaration : type_specifier declaration_list SEMICOLON

int a;

Line 5: unit : var_declaration

int a;


Line 5: program : unit

int a;


Line 6: type_specifier : INT

int 

Line 6: type_specifier : INT

int 

Line 6: parameter_list : type_specifier ID

int a

Line 6: func_definition : type_specifier ID LPAREN parameter_list RPAREN compound_statement

Line 7: variable : ID

a

Line 7: factor : variable

a

Line 7: unary_expression : factor

a

Line 7: term : unary_expression

a

Line 7: simple_expression : term

a

Line 7: factor : CONST_INT

1

Line 7: unary_expression : factor

1

Line 7: term : unary_expression

1

Line 7: simple_expression : term

1

Line 7: rel_expression : simple_expression RELOP simple_expression

a==1

Line 7: logic_expression : rel_expression

a==1

Line 7: expression : logic expression

a==1

Line 8: factor : CONST_INT

1

Line 8: unary_expression : factor

1

Line 8: term : unary_expression

1

Line 8: simple_expression : term

1

Line 8: rel_expression : simple_expression

1

Line 8: logic_expression : rel_expression

1

Line 8: expression : logic expression

1

Line 8: statement : RETURN expression SEMICOLON

return 1;


Line 8: statements : statement

return 1;


Line 9: compound_statement : LCURL statements RCURL

{
return 1;
}

ScopeTable # 1.2.1

ScopeTable # 1.1
 7 --> < a : ID> 

ScopeTable # 1
 0 --> < function : ID> 
 7 --> < a : ID> 

Line 9: statement : compound_statement

{
return 1;
}

Line 10: IF LPAREN expression RPAREN statement

if(a==1){
return 1;
}

Line 10: statements : statement

if(a==1){
return 1;
}


Line 10: variable : ID

a

Line 10: factor : variable

a

Line 10: unary_expression : factor

a

Line 10: term : unary_expression

a

Line 10: variable : ID

a

Line 10: factor : variable

a

Line 10: unary_expression : factor

a

Line 10: term : unary_expression

a

Line 10: simple_expression : term

a

Line 10: factor : CONST_INT

1

Line 10: unary_expression : factor

1

Line 10: term : unary_expression

1

Line 10: simple_expression : simple_expression ADDOP term

a-1

Line 10: rel_expression : simple_expression

a-1

Line 10: logic_expression : rel_expression

a-1

Line 10: arguments : logic_expression

a-1

Line 10: argument_list : arguments

a-1

Line 10: factor : ID LPAREN argument_list RPAREN

function(a-1)

Line 10: unary_expression : factor

function(a-1)

Line 10: term : term MULOP unary_expression

a*function(a-1)

Line 10: simple_expression : term

a*function(a-1)

Line 10: rel_expression : simple_expression

a*function(a-1)

Line 10: logic_expression : rel_expression

a*function(a-1)

Line 10: expression : logic expression

a*function(a-1)

Line 10: statement : RETURN expression SEMICOLON

return a*function(a-1);


Line 10: statements : statements statement

if(a==1){
return 1;
}
return a*function(a-1);


Line 11: compound_statement : LCURL statements RCURL

{
if(a==1){
return 1;
}
return a*function(a-1);
}

ScopeTable # 1.1
 7 --> < a : ID> 

ScopeTable # 1
 0 --> < function : ID> 
 7 --> < a : ID> 

Line 11: func_definition : type_specifier ID LPAREN parameter_list RPAREN compound_statement

int function(int a){
if(a==1){
return 1;
}
return a*function(a-1);
}

Line 11: unit : func_definition

int function(int a){
if(a==1){
return 1;
}
return a*function(a-1);
}


Line 11: program : program unit

int a;
int function(int a){
if(a==1){
return 1;
}
return a*function(a-1);
}


Line 13: type_specifier : INT

int 

Line 13: func_definition : type_specifier ID LPAREN RPAREN compound_statement

Line 14: variable : ID

a

Line 14: factor : CONST_INT

1

Line 14: unary_expression : factor

1

Line 14: term : unary_expression

1

Line 14: simple_expression : term

1

Line 14: rel_expression : simple_expression

1

Line 14: logic_expression : rel_expression

1

Line 14: expression : variable ASSIGNOP logic_expression

a=1

Line 14: expression_statement : expression SEMICOLON

a=1;

Line 14: statement : expression_statement

a=1;


Line 14: statements : statement

a=1;


Line 15: type_specifier : INT

int 

Line 15: declaration_list : ID

b

Line 15: var_declaration : type_specifier declaration_list SEMICOLON

int b;

Line 15: statement : var_declaration

int b;

Line 15: statements : statements statement

a=1;
int b;


Line 16: variable : ID

b

Line 16: factor : CONST_INT

6

Line 16: unary_expression : factor

6

Line 16: term : unary_expression

6

Line 16: simple_expression : term

6

Line 16: rel_expression : simple_expression

6

Line 16: logic_expression : rel_expression

6

Line 16: expression : variable ASSIGNOP logic_expression

b=6

Line 16: expression_statement : expression SEMICOLON

b=6;

Line 16: statement : expression_statement

b=6;


Line 16: statements : statements statement

a=1;
int b;
b=6;


Line 18: variable : ID

a

Line 18: variable : ID

a

Line 18: factor : variable

a

Line 18: unary_expression : factor

a

Line 18: term : unary_expression

a

Line 18: simple_expression : term

a

Line 18: variable : ID

b

Line 18: factor : variable

b

Line 18: unary_expression : factor

b

Line 18: term : unary_expression

b

Line 18: simple_expression : term

b

Line 18: rel_expression : simple_expression

b

Line 18: logic_expression : rel_expression

b

Line 18: arguments : logic_expression

b

Line 18: argument_list : arguments

b

Line 18: factor : ID LPAREN argument_list RPAREN

function(b)

Line 18: unary_expression : factor

function(b)

Line 18: term : unary_expression

function(b)

Line 18: simple_expression : simple_expression ADDOP term

a+function(b)

Line 18: rel_expression : simple_expression

a+function(b)

Line 18: logic_expression : rel_expression

a+function(b)

Line 18: expression : variable ASSIGNOP logic_expression

a=a+function(b)

Line 18: expression_statement : expression SEMICOLON

a=a+function(b);

Line 18: statement : expression_statement

a=a+function(b);


Line 18: statements : statements statement

a=1;
int b;
b=6;
a=a+function(b);


Line 19: statement : PRINTLN LPAREN ID RPAREN SEMICOLON

println(a);

Line 19: statements : statements statement

a=1;
int b;
b=6;
a=a+function(b);
println(a);


Line 20: compound_statement : LCURL statements RCURL

{
a=1;
int b;
b=6;
a=a+function(b);
println(a);
}

ScopeTable # 1.2
 8 --> < b : ID> 

ScopeTable # 1
 0 --> < function : ID> 
 1 --> < main : ID> 
 7 --> < a : ID> 

Line 20: func_definition : type_specifier ID LPAREN RPAREN compound_statement

int main(){
a=1;
int b;
b=6;
a=a+function(b);
println(a);
}

Line 20: unit : func_definition

int main(){
a=1;
int b;
b=6;
a=a+function(b);
println(a);
}


Line 20: program : program unit

int a;
int function(int a){
if(a==1){
return 1;
}
return a*function(a-1);
}
int main(){
a=1;
int b;
b=6;
a=a+function(b);
println(a);
}


Line 20: start : program


ScopeTable # 1
 0 --> < function : ID> 
 1 --> < main : ID> 
 7 --> < a : ID> 

Total lines: 20
Total errors: 0

