Line 5: type_specifier : INT

int 

Line 5: func_definition : type_specifier ID LPAREN RPAREN compound_statement

Line 6: type_specifier : INT

int 

Line 6: declaration_list : ID

a

Line 6: declaration_list : declaration_list COMMA ID

a,b

Line 6: declaration_list : declaration_list COMMA ID

a,b,c

Line 6: declaration_list : declaration_list COMMA ID

a,b,c,i

Line 6: var_declaration : type_specifier declaration_list SEMICOLON

int a,b,c,i;

Line 6: statement : var_declaration

int a,b,c,i;

Line 6: statements : statement

int a,b,c,i;


Line 7: variable : ID

b

Line 7: factor : CONST_INT

0

Line 7: unary_expression : factor

0

Line 7: term : unary_expression

0

Line 7: simple_expression : term

0

Line 7: rel_expression : simple_expression

0

Line 7: logic_expression : rel_expression

0

Line 7: expression : variable ASSIGNOP logic_expression

b=0

Line 7: expression_statement : expression SEMICOLON

b=0;

Line 7: statement : expression_statement

b=0;


Line 7: statements : statements statement

int a,b,c,i;
b=0;


Line 8: variable : ID

c

Line 8: factor : CONST_INT

1

Line 8: unary_expression : factor

1

Line 8: term : unary_expression

1

Line 8: simple_expression : term

1

Line 8: rel_expression : simple_expression

1

Line 8: logic_expression : rel_expression

1

Line 8: expression : variable ASSIGNOP logic_expression

c=1

Line 8: expression_statement : expression SEMICOLON

c=1;

Line 8: statement : expression_statement

c=1;


Line 8: statements : statements statement

int a,b,c,i;
b=0;
c=1;


Line 9: variable : ID

i

Line 9: factor : CONST_INT

0

Line 9: unary_expression : factor

0

Line 9: term : unary_expression

0

Line 9: simple_expression : term

0

Line 9: rel_expression : simple_expression

0

Line 9: logic_expression : rel_expression

0

Line 9: expression : variable ASSIGNOP logic_expression

i=0

Line 9: expression_statement : expression SEMICOLON

i=0;

Line 9: variable : ID

i

Line 9: factor : variable

i

Line 9: unary_expression : factor

i

Line 9: term : unary_expression

i

Line 9: simple_expression : term

i

Line 9: factor : CONST_INT

4

Line 9: unary_expression : factor

4

Line 9: term : unary_expression

4

Line 9: simple_expression : term

4

Line 9: rel_expression : simple_expression RELOP simple_expression

i<4

Line 9: logic_expression : rel_expression

i<4

Line 9: expression : logic expression

i<4

Line 9: expression_statement : expression SEMICOLON

i<4;

Line 9: variable : ID

i

Line 9: factor : variable INCOP

i++

Line 9: unary_expression : factor

i++

Line 9: term : unary_expression

i++

Line 9: simple_expression : term

i++

Line 9: rel_expression : simple_expression

i++

Line 9: logic_expression : rel_expression

i++

Line 9: expression : logic expression

i++

Line 10: variable : ID

a

Line 10: factor : CONST_INT

3

Line 10: unary_expression : factor

3

Line 10: term : unary_expression

3

Line 10: simple_expression : term

3

Line 10: rel_expression : simple_expression

3

Line 10: logic_expression : rel_expression

3

Line 10: expression : variable ASSIGNOP logic_expression

a=3

Line 10: expression_statement : expression SEMICOLON

a=3;

Line 10: statement : expression_statement

a=3;


Line 10: statements : statement

a=3;


Line 11: variable : ID

a

Line 11: factor : variable DECOP

a--

Line 11: unary_expression : factor

a--

Line 11: term : unary_expression

a--

Line 11: simple_expression : term

a--

Line 11: rel_expression : simple_expression

a--

Line 11: logic_expression : rel_expression

a--

Line 11: expression : logic expression

a--

Line 12: variable : ID

b

Line 12: factor : variable INCOP

b++

Line 12: unary_expression : factor

b++

Line 12: term : unary_expression

b++

Line 12: simple_expression : term

b++

Line 12: rel_expression : simple_expression

b++

Line 12: logic_expression : rel_expression

b++

Line 12: expression : logic expression

b++

Line 12: expression_statement : expression SEMICOLON

b++;

Line 12: statement : expression_statement

b++;


Line 12: statements : statement

b++;


Line 13: compound_statement : LCURL statements RCURL

{
b++;
}

ScopeTable # 1.2.3.1

ScopeTable # 1.2.1

ScopeTable # 1.1
 7 --> < a : ID> 
 8 --> < b : ID> 
 9 --> < c : ID> 
 15 --> < i : ID> 

ScopeTable # 1
 1 --> < main : ID> 

Line 13: statement : compound_statement

{
b++;
}

Line 13: WHILE LPAREN expression RPAREN statement

while(a--){
b++;
}

Line 13: statements : statements statement

a=3;
while(a--){
b++;
}


Line 14: compound_statement : LCURL statements RCURL

{
a=3;
while(a--){
b++;
}
}

ScopeTable # 1.2.1

ScopeTable # 1.1
 7 --> < a : ID> 
 8 --> < b : ID> 
 9 --> < c : ID> 
 15 --> < i : ID> 

ScopeTable # 1
 1 --> < main : ID> 

Line 14: statement : compound_statement

{
a=3;
while(a--){
b++;
}
}

Line 14: statement : FOR LPAREN expression_statement expression_statement expression RPAREN statement

for(i=0;i<4;i++){
a=3;
while(a--){
b++;
}
}

Line 14: statements : statements statement

int a,b,c,i;
b=0;
c=1;
for(i=0;i<4;i++){
a=3;
while(a--){
b++;
}
}


Line 15: variable : ID

a

Line 15: variable : ID

b

Line 15: factor : variable

b

Line 15: unary_expression : factor

b

Line 15: term : unary_expression

b

Line 15: simple_expression : term

b

Line 15: variable : ID

a

Line 15: factor : variable

a

Line 15: unary_expression : factor

a

Line 15: term : unary_expression

a

Line 15: simple_expression : simple_expression ADDOP term

b-a

Line 15: rel_expression : simple_expression

b-a

Line 15: logic_expression : rel_expression

b-a

Line 15: expression : variable ASSIGNOP logic_expression

a=b-a

Line 15: expression_statement : expression SEMICOLON

a=b-a;

Line 15: statement : expression_statement

a=b-a;


Line 15: statements : statements statement

int a,b,c,i;
b=0;
c=1;
for(i=0;i<4;i++){
a=3;
while(a--){
b++;
}
}
a=b-a;


Line 16: statement : PRINTLN LPAREN ID RPAREN SEMICOLON

println(a);

Line 16: statements : statements statement

int a,b,c,i;
b=0;
c=1;
for(i=0;i<4;i++){
a=3;
while(a--){
b++;
}
}
a=b-a;
println(a);


Line 17: statement : PRINTLN LPAREN ID RPAREN SEMICOLON

println(b);

Line 17: statements : statements statement

int a,b,c,i;
b=0;
c=1;
for(i=0;i<4;i++){
a=3;
while(a--){
b++;
}
}
a=b-a;
println(a);
println(b);


Line 18: variable : ID

c

Line 18: variable : ID

c

Line 18: factor : variable

c

Line 18: unary_expression : factor

c

Line 18: term : unary_expression

c

Line 18: simple_expression : term

c

Line 18: factor : CONST_INT

10

Line 18: unary_expression : factor

10

Line 18: term : unary_expression

10

Line 18: simple_expression : simple_expression ADDOP term

c+10

Line 18: rel_expression : simple_expression

c+10

Line 18: logic_expression : rel_expression

c+10

Line 18: expression : variable ASSIGNOP logic_expression

c=c+10

Line 18: expression_statement : expression SEMICOLON

c=c+10;

Line 18: statement : expression_statement

c=c+10;


Line 18: statements : statements statement

int a,b,c,i;
b=0;
c=1;
for(i=0;i<4;i++){
a=3;
while(a--){
b++;
}
}
a=b-a;
println(a);
println(b);
c=c+10;


Line 19: statement : PRINTLN LPAREN ID RPAREN SEMICOLON

println(c);

Line 19: statements : statements statement

int a,b,c,i;
b=0;
c=1;
for(i=0;i<4;i++){
a=3;
while(a--){
b++;
}
}
a=b-a;
println(a);
println(b);
c=c+10;
println(c);


Line 20: compound_statement : LCURL statements RCURL

{
int a,b,c,i;
b=0;
c=1;
for(i=0;i<4;i++){
a=3;
while(a--){
b++;
}
}
a=b-a;
println(a);
println(b);
c=c+10;
println(c);
}

ScopeTable # 1.1
 7 --> < a : ID> 
 8 --> < b : ID> 
 9 --> < c : ID> 
 15 --> < i : ID> 

ScopeTable # 1
 1 --> < main : ID> 

Line 20: func_definition : type_specifier ID LPAREN RPAREN compound_statement

int main(){
int a,b,c,i;
b=0;
c=1;
for(i=0;i<4;i++){
a=3;
while(a--){
b++;
}
}
a=b-a;
println(a);
println(b);
c=c+10;
println(c);
}

Line 20: unit : func_definition

int main(){
int a,b,c,i;
b=0;
c=1;
for(i=0;i<4;i++){
a=3;
while(a--){
b++;
}
}
a=b-a;
println(a);
println(b);
c=c+10;
println(c);
}


Line 20: program : unit

int main(){
int a,b,c,i;
b=0;
c=1;
for(i=0;i<4;i++){
a=3;
while(a--){
b++;
}
}
a=b-a;
println(a);
println(b);
c=c+10;
println(c);
}


Line 20: start : program


ScopeTable # 1
 1 --> < main : ID> 

Total lines: 20
Total errors: 0

