Line 5: type_specifier : INT

int 

Line 5: declaration_list : ID

a

Line 5: var_declaration : type_specifier declaration_list SEMICOLON

int a;

Line 5: unit : var_declaration

int a;


Line 5: program : unit

int a;


Line 6: type_specifier : INT

int 

Line 6: type_specifier : INT

int 

Line 6: parameter_list : type_specifier ID

int a

Line 6: func_definition : type_specifier ID LPAREN parameter_list RPAREN compound_statement

Line 7: variable : ID

a

Line 7: factor : variable

a

Line 7: unary_expression : factor

a

Line 7: term : unary_expression

a

Line 7: factor : CONST_INT

2

Line 7: unary_expression : factor

2

Line 7: term : term MULOP unary_expression

a%2

Line 7: simple_expression : term

a%2

Line 7: rel_expression : simple_expression

a%2

Line 7: logic_expression : rel_expression

a%2

Line 7: expression : logic expression

a%2

Line 7: statement : RETURN expression SEMICOLON

return a%2;


Line 7: statements : statement

return a%2;


Line 8: compound_statement : LCURL statements RCURL

{
return a%2;
}

ScopeTable # 1.1
 7 --> < a : ID> 

ScopeTable # 1
 0 --> < function : ID> 
 7 --> < a : ID> 

Line 8: func_definition : type_specifier ID LPAREN parameter_list RPAREN compound_statement

int function(int a){
return a%2;
}

Line 8: unit : func_definition

int function(int a){
return a%2;
}


Line 8: program : program unit

int a;
int function(int a){
return a%2;
}


Line 10: type_specifier : INT

int 

Line 10: func_definition : type_specifier ID LPAREN RPAREN compound_statement

Line 11: variable : ID

a

Line 11: factor : CONST_INT

1

Line 11: unary_expression : factor

1

Line 11: term : unary_expression

1

Line 11: simple_expression : term

1

Line 11: rel_expression : simple_expression

1

Line 11: logic_expression : rel_expression

1

Line 11: expression : variable ASSIGNOP logic_expression

a=1

Line 11: expression_statement : expression SEMICOLON

a=1;

Line 11: statement : expression_statement

a=1;


Line 11: statements : statement

a=1;


Line 12: type_specifier : INT

int 

Line 12: declaration_list : ID

b

Line 12: var_declaration : type_specifier declaration_list SEMICOLON

int b;

Line 12: statement : var_declaration

int b;

Line 12: statements : statements statement

a=1;
int b;


Line 13: variable : ID

b

Line 13: factor : CONST_INT

6

Line 13: unary_expression : factor

6

Line 13: term : unary_expression

6

Line 13: simple_expression : term

6

Line 13: rel_expression : simple_expression

6

Line 13: logic_expression : rel_expression

6

Line 13: expression : variable ASSIGNOP logic_expression

b=6

Line 13: expression_statement : expression SEMICOLON

b=6;

Line 13: statement : expression_statement

b=6;


Line 13: statements : statements statement

a=1;
int b;
b=6;


Line 14: type_specifier : INT

int 

Line 14: declaration_list : ID

c

Line 14: var_declaration : type_specifier declaration_list SEMICOLON

int c;

Line 14: statement : var_declaration

int c;

Line 14: statements : statements statement

a=1;
int b;
b=6;
int c;


Line 15: variable : ID

c

Line 15: factor : CONST_INT

2

Line 15: unary_expression : factor

2

Line 15: term : unary_expression

2

Line 15: simple_expression : term

2

Line 15: rel_expression : simple_expression

2

Line 15: logic_expression : rel_expression

2

Line 15: expression : variable ASSIGNOP logic_expression

c=2

Line 15: expression_statement : expression SEMICOLON

c=2;

Line 15: statement : expression_statement

c=2;


Line 15: statements : statements statement

a=1;
int b;
b=6;
int c;
c=2;


Line 17: variable : ID

b

Line 17: factor : variable

b

Line 17: unary_expression : factor

b

Line 17: term : unary_expression

b

Line 17: simple_expression : term

b

Line 17: rel_expression : simple_expression

b

Line 17: logic_expression : rel_expression

b

Line 17: arguments : logic_expression

b

Line 17: argument_list : arguments

b

Line 17: factor : ID LPAREN argument_list RPAREN

function(b)

Line 17: unary_expression : factor

function(b)

Line 17: term : unary_expression

function(b)

Line 17: simple_expression : term

function(b)

Line 17: factor : CONST_INT

1

Line 17: unary_expression : factor

1

Line 17: term : unary_expression

1

Line 17: simple_expression : term

1

Line 17: rel_expression : simple_expression RELOP simple_expression

function(b)==1

Line 17: logic_expression : rel_expression

function(b)==1

Line 17: expression : logic expression

function(b)==1

Line 18: statement : PRINTLN LPAREN ID RPAREN SEMICOLON

println(a);

Line 18: statements : statement

println(a);


Line 19: compound_statement : LCURL statements RCURL

{
println(a);
}

ScopeTable # 1.3.1

ScopeTable # 1.2
 8 --> < b : ID> 
 9 --> < c : ID> 

ScopeTable # 1
 0 --> < function : ID> 
 1 --> < main : ID> 
 7 --> < a : ID> 

Line 19: statement : compound_statement

{
println(a);
}

Line 20: statement : PRINTLN LPAREN ID RPAREN SEMICOLON

println(c);

Line 20: statements : statement

println(c);


Line 21: compound_statement : LCURL statements RCURL

{
println(c);
}

ScopeTable # 1.3.2

ScopeTable # 1.2
 8 --> < b : ID> 
 9 --> < c : ID> 

ScopeTable # 1
 0 --> < function : ID> 
 1 --> < main : ID> 
 7 --> < a : ID> 

Line 21: statement : compound_statement

{
println(c);
}

Line 21: IF LPAREN expression RPAREN statement ELSE statement

if(function(b)==1){
println(a);
}else{
println(c);
}

Line 21: statements : statements statement

a=1;
int b;
b=6;
int c;
c=2;
if(function(b)==1){
println(a);
}else{
println(c);
}


Line 22: statement : PRINTLN LPAREN ID RPAREN SEMICOLON

println(b);

Line 22: statements : statements statement

a=1;
int b;
b=6;
int c;
c=2;
if(function(b)==1){
println(a);
}else{
println(c);
}
println(b);


Line 23: compound_statement : LCURL statements RCURL

{
a=1;
int b;
b=6;
int c;
c=2;
if(function(b)==1){
println(a);
}else{
println(c);
}
println(b);
}

ScopeTable # 1.2
 8 --> < b : ID> 
 9 --> < c : ID> 

ScopeTable # 1
 0 --> < function : ID> 
 1 --> < main : ID> 
 7 --> < a : ID> 

Line 23: func_definition : type_specifier ID LPAREN RPAREN compound_statement

int main(){
a=1;
int b;
b=6;
int c;
c=2;
if(function(b)==1){
println(a);
}else{
println(c);
}
println(b);
}

Line 23: unit : func_definition

int main(){
a=1;
int b;
b=6;
int c;
c=2;
if(function(b)==1){
println(a);
}else{
println(c);
}
println(b);
}


Line 23: program : program unit

int a;
int function(int a){
return a%2;
}
int main(){
a=1;
int b;
b=6;
int c;
c=2;
if(function(b)==1){
println(a);
}else{
println(c);
}
println(b);
}


Line 24: start : program


ScopeTable # 1
 0 --> < function : ID> 
 1 --> < main : ID> 
 7 --> < a : ID> 

Total lines: 24
Total errors: 0

